<?php
// $Id: page_example.test,v 1.1.2.3 2010/09/03 17:08:33 rfay Exp $

/**
 * @file
 * Test case for Testing the page example module.
 *
 * This file contains the test cases to check if module is performing as
 * expected.
 *
 */
class ApplicationPaymentTestCase extends DrupalWebTestCase  {
  protected $web_user;

  public static function getInfo() {
    return array(
      'name' => 'Application Payment',
      'description' => 'Creates page and render the content based on the arguments passed in the URL.',
      'group' => 'Florida Hospital College Modules',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  function setUp() {
    parent::setUp('sonisweb_integration', 'application_payment');
    
   //creating credentials for settings 
   //get persistant varible from the varible table in the Drupal DB
   $settings = variable_get('application_payment_settings', array());
   //add new value to the settings varible
   $settings = array( 'undergraduate' => array('t_code' => 'test_tcode', 'amount' => 20.00));
   //save values in drupal
   variable_set('application_payment_settings', $settings);
   
   //setting sonisweb API password
   variable_set('sonisweb_integration_admin_user', 'apiadmin');
   variable_set('sonisweb_integration_admin_password', 'apiadm');
   variable_set('sonisweb_integration_caching_length', '0');
   variable_set('sonisweb_integration_soap_base_url', 'http://fhcdv-mars.fhchs.edu/sonisweb200/CustomPages/');
  }


  /**
   * Verify that current user has no access to page.
   *
   * @param $url
   *   URL to verify.
   */
  function pageExampleVerifyNoAccess($url) {
    // Test that page returns 403 Access Denied
    $this->drupalGet($url);
    $this->assertResponse(403);
  }
  

  /**
   * Login user, create an example node, and test blog functionality through the admin and user interfaces.
   */
  //test admin page
  function testApplicationPaymentSettings() {
   //create settings
  
    //Test Case 1.2 application_payment.xlsx Application Payment Settings tab
    
    // Verify that anonymous user can't access the pages created by
    // application_payments module
    $this->pageExampleVerifyNoAccess('admin/settings/fhchs/application_payments');
    
    // Create a regular user and login.
    $this->web_user = $this->drupalCreateUser();
    $this->drupalLogin($this->web_user);

    // Verify that regular user can't access the pages created by
    // page_example module
    $this->pageExampleVerifyNoAccess('admin/settings/fhchs/application_payments');

   //Test Case 1.1 application_payment.xlsx Application Payment Settings tab
   
    // Create a user with permissions to access 'application setting payment' page and login.
    $this->web_user = $this->drupalCreateUser(array('access settings application payment'));
    $this->drupalLogin($this->web_user);

    // Verify that user can access content
    $this->drupalGet('admin/settings/fhchs/application_payments');
    $this->assertResponse(200, t('Payment settings page fail accessed.'));
    
    //Test Case 2.1 application_payment.xlsx Application Paymnet Settings tab
    $this->drupalPost('admin/settings/fhchs/application_payments', array('name' => t('test_name'), 't_code' => t('LA'), 'amount' => t('20.00')) , t('Save Settings'));
    $settings = variable_get('application_payment_settings', array());
    $this->assertTrue(isset($settings['test_name']), 'New application setting has not been created');
    
    //Test Case 2.2 application_payment.xlsx Application Payment Settings tab
    $this->assertTrue(($settings['test_name']['amount'] == '20.00'), 'Amount is not equal to the same amount that the setting was created.');
    $this->drupalPost('admin/settings/fhchs/application_payments/update/test_name', array('name' => t('test_name'), 't_code' => t('LA'), 'amount'=>t('30.00'), 'update'=>t('update')), t('Save Settings'));
    //get the settings and check if the update has changed
    $settings = variable_get('application_payment_settings', array());
    $this->assertTrue(($settings['test_name']['amount'] == '30.00'), 'Amount has not been updated to $30.00.');
    
    //Test Case 2.3 application_payment.xlsx Application Payment Settings tab
    $settings = variable_get('application_payment_settings', array());
    $this->assertTrue(isset($settings['test_name']), 'A setting test_name is not in the settings');
    $this->drupalPost('admin/settings/fhchs/application_payments/remove/test_name', NULL, t('Remove'));
    $settings = variable_get('application_payment_settings', array());
    $this->assertFalse(isset($settings['test_name']), 'A settings test_name is in the settings');
    
  }
  
  //front end page
   function testApplicationPayment() {
    
   //Test Case 1.1 application_payment.xlsx Application Payment tab
   
   // Verify that anonymous user can't access the pages created by
   // appliation_payment module
   $this->pageExampleVerifyNoAccess('pay/application/undergraduate');
    
   // Create a regular user and login
   $this->web_user = $this->drupalCreateUser();
   $this->drupalLogin($this->web_user);

   // Verify that regular user can't access the pages created by
   // application_payment module
   $this->pageExampleVerifyNoAccess('pay/application/undergraduate');

   //Test Case 1.2 application_payment.xlsx Application Payment tab
   // Create a user with permissions to access 'application payment' page and login.
   $this->web_user = $this->drupalCreateUser(array('access applicants payment page'));
   $this->drupalLogin($this->web_user);

   // Verify that user can access foo content
   $this->drupalGet('pay/application/undergraduate');
   $this->assertResponse(200, t('Application payment page content fail accessed.'));
  }
  
  function testApplicationPaymentAPIUsage() {
   //Test Case 4.1 application_payment.xlsx Test application Payment tab
   
   $this->web_user = $this->drupalCreateUser(array('access applicants payment page'));
   $this->drupalLogin($this->web_user);

   // Verify that user can access foo content
   $this->drupalGet('pay/application/undergraduate');
   $this->assertResponse(200, t('Application payment page content fail accessed.'));
   
   $this->assertText(t('It appears you have already paid your application fee, if you have any question please contact your enrollment advisor.'));
   
   //Looking deeper into integration
  
   //Creating a user that needs a payment
   $user_name = sonisweb_integration_sql("SELECT TOP 1 soc_sec FROM nmappchk AS nm INNER JOIN appchk AS app ON app.appchk_cod = nm.appchk_cod
    WHERE nm.chk_comp = 0 AND app.disabled = 0 AND app.appchk_txt LIKE '%app%fee%'");
   
   //Check if the API return a user set
   if(empty($user_name)) {
     $this->assertTrue(FALSE, 'Unable to retrive user name with no application payment from SONIS API');
   }
   else {
    //Getting user with little 
    $name = $user_name[0]['SOC_SEC']; 
   
    //Create the role   
    if (!$rid = $this->drupalCreateRole(array('access applicants payment page'))) {
     $this->assertTrue(FALSE,'Unable to create user role');
    }
     
    // Create a user assigned to that role.
    $edit = array();
    $edit['name']   = $name;
    $edit['mail']   = $name . '@example.com';
    $edit['roles']  = array($rid => $rid);
    $edit['pass']   = user_password();
    $edit['status'] = 1;
    
    //Load user
    $account = user_load(array('name' => $name));
    
    //If the user is loaded set to true else set false
    $is_user_loaded = (is_object($account))?TRUE:FALSE;
    
    //If user is loaded create set a message user has been loadeds
    if($is_user_loaded) {
     //User has been loaded
     $this->assertTrue( $is_user_loaded, "User has been loaded");
    }
    else {
     //If user not loaded create a new user
     $account = user_save(drupal_anonymous_user(), $edit);
     //If urer is created assert true
     $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
     
    }
 
    //Set raw pass to log use in
    $account->pass_raw = $edit['pass'];
  
    //Login user
    $this->drupalLogin($account);
     
    // Verify that user can access foo content
    $this->drupalGet('pay/application');
    $this->assertResponse(200, t('Application payment page content fail accessed.'));
    
    //Get application payments
    $application_payments = variable_get('application_payment_settings', array());
    
    //Check if user gets the option to make a payment   
    $this->assertText(t('Pay my undergraduate application fee'));
    
   
   }
   
 
  }
}
